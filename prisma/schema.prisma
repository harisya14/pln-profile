// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  email         String         @unique
  password      String
  image         String?
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Article {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String        @unique // Untuk URL unik berdasarkan judul
  coverImage  String        // Link gambar sampul
  content     String        // Content dari rich text editor akan disimpan dalam bentuk String (HTML/JSON)
  image       String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ultgtarahan {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  namagi           String
  image            String
  slug             String       @unique
  alamat           String
  googleMapsEmbed  String
}

model ultgtegineneng {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  namagi           String
  image            String
  slug             String       @unique
  alamat           String
  googleMapsEmbed  String
}

model ultgpagelaran {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  namagi           String
  image            String
  slug             String       @unique
  alamat           String
  googleMapsEmbed  String
}

model ultgkotabumi {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  namagi           String
  image            String
  slug             String       @unique
  alamat           String
  googleMapsEmbed  String
}

model ManajemenSection {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String   @unique // Judul bagian manajemen (misal: "Manager UPT", "Divisi Keuangan")
  anchor           String   @unique // Anchor HTML, juga bisa berfungsi sebagai slug unik
  orderIndex       Int      @default(0) // Untuk mengurutkan bagian-bagian manajemen di frontend

  // Asisten (opsional), disimpan langsung di sini untuk kesederhanaan
  assistantName    String?
  assistantJabatan String?
  assistantImage   String? // URL gambar asisten dari Cloudinary

  // Relasi ke Persons yang terkait dengan bagian ini
  persons          Person[]
}

model Person {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  jabatan            String
  imageUrl           String?  // Opsional, URL gambar orang dari Cloudinary
  
  // Relasi ke ManajemenSection
  sectionId          String   @db.ObjectId
  section            ManajemenSection @relation(fields: [sectionId], references: [id], onDelete: Cascade) // onDelete: Cascade akan menghapus Person jika Section dihapus

  // Untuk merekonstruksi struktur 'containers' di frontend
  containerGroup     Int      // Indeks group dalam containers (e.g., containers[0] -> 0, containers[1] -> 1)
  personIndexInGroup Int      // Indeks orang dalam group tersebut (e.g., containers[0][0] -> 0, containers[0][1] -> 1)
}